# Introduction {#intro}


## BigDecimal Compare
```{java  eval=TRUE}
// ???
// less $10
final Predicate<BigDecimal> test = product -> product.getPrice().comapreTo(new BigDecimal(10)) <= 0  
```


### Annotation 

```{java eval = TRUE}
  @AllArgsConstructor
  @Data
  static class Product {
    private Long id;
    private String name;
    private BigDecimal price;
  }

  @ToString(callSuper = true)
  static class DiscountedProduct extends Product {
    public DiscountedProduct(final Long id, final String name, final BigDecimal price) {
      super(id, name, price);
    }
  }

  private static <T> List<T> filter(final List<T> list, final Predicate<? super T> predicate) {
    final List<T> result = new ArrayList<>();
    for (final T t : list) {
      if (predicate.test(t)) {
        /* Predicate.test()를 만족하는 경우만 저장 */
        result.add(t);
      }
    }
    return result;
  }

  
  private static <T, R> List<R> map(final List<T> list, final Function<T, R> function) {
    final List<R> result = new ArrayList<>();
    for (final T t : list) {
      /* function을 이용해서 타입변환: T -> R */
      result.add(function.apply(t));
    }
    return result;
  }
  
  private static <T> BigDecimal total(final List<T> list, final Function<T, BigDecimal> mapper) {
    BigDecimal total = BigDecimal.ZERO;
    for (final T t : list) {
      /* mapper를 이용해서 T타입을 BigDecimal로 변환 */
      total = total.add(mapper.apply(t));
    }
    return total;
  }
  
  final BigDecimal discountedTotal = total(discountedProducts, product -> product.getPrice());
  System.out.println("discountedTotal: " + discountedTotal);

  /*
   * 가격이 $50 초과되는 Product를 찾은후 (filter)
   * 50% 할인 가격 적용 (원래 가격 * 0.5)
   */
  final List<DiscountedProduct> discountedProducts =
      map(
          filter(products, product -> product.getPrice().compareTo(new BigDecimal("50")) > 0),
          product -> new DiscountedProduct(product.getId(),
                                           product.getName(),
                                           product.getPrice().multiply(new BigDecimal("0.5")))
      );
```

### Reduce Operation (BigDecimal Sum)
```{java}
System.out.println("Total Price: " +
            products.stream()
                    .map(product -> product.getPrice())
                    .reduce(BigDecimal.ZERO, (price1, price2) -> price1.add(price2))
    );

System.out.println("Total Price: " +
            products.stream()
                    .map(product -> product.getPrice())
                    .reduce(BigDecimal.ZERO, BigDecimal::ADD)
    );

```




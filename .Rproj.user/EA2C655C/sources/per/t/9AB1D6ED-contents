# Method Reference
기존 메소드 재사용이 가능하다

```{java  eval=TRUE}
Arrays.asList("a", "b", "c", "d")
            .stream()
            .anyMatch("c"::equals);
```

## Constractor
final Function<Integer, Section> sectionFactoryWithMethodReference = Section::new;
sectionFactoryWithMethodReference.apply(1, "Name", "address");



```{java  eval=TRUE}
@AllArgsConstructor
@Data
abstract class Product {
  private Long id;
  private String name;
  private BigDecimal price;
}

class ProductA extends Product {

  public ProductA(final Long id, final String name, final BigDecimal price) {
    super(id, name, price);
  }

  @Override
  public String toString() {
    return "A=" + super.toString();
  }
}

class ProductB extends Product {

  public ProductB(final Long id, final String name, final BigDecimal price) {
    super(id, name, price);
  }

  @Override
  public String toString() {
    return "B=" + super.toString();
  }
}

@FunctionalInterface
interface ProductCreator<T extends Product> {
  T create(Long id, String name, BigDecimal price);
}


private static <T extends Product> T createProduct(final Long id,
                                            final String name,
                                            final BigDecimal price,
                                            final ProductCreator<T> productCreator) {
  if (id == null || id < 1L) {
    throw new IllegalArgumentException("The id must be a positive Long.");
  }
  if (name == null || name.isEmpty()) {
    throw new IllegalArgumentException("The name is not given.");
  }
  if (price == null || price.compareTo(BigDecimal.ZERO) <= 0) { // price <= ZERO
    throw new IllegalArgumentException("The price must be greater then 0.");
  }
  return productCreator.create(id, name, price);
}

final ProductA a = createProduct(1L, "A", new BigDecimal("123"), ProductA::new);
final ProductB b = createProduct(2L, "B", new BigDecimal("111"), ProductB::new);
```